<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>pro.jiefzz</groupId>
	<artifactId>ejoker</artifactId>
	<version>1.2.0-snapshot-3</version>
	<name>EJoker</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
	</properties>

	<dependencies>

		<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.5.2</version>
			<scope>test</scope>
		</dependency>


		<!-- 日志组件 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.25</version>
			<scope>compile</scope>
		</dependency>

		<!-- 号称最快的json包 -->
		<dependency>
			<groupId>net.minidev</groupId>
			<artifactId>json-smart</artifactId>
			<version>2.3</version>
			<scope>compile</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/io.netty/netty-all -->
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty-all</artifactId>
			<version>4.1.34.Final</version>
			<scope>compile</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.rocketmq/rocketmq-client -->
		<dependency>
			<groupId>org.apache.rocketmq</groupId>
			<artifactId>rocketmq-client</artifactId>
			<version>4.4.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.aliyun.openservices/ons-client -->
		<dependency>
			<groupId>com.aliyun.openservices</groupId>
			<artifactId>ons-client</artifactId>
			<version>1.7.9.Final</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/co.paralleluniverse/quasar-core -->
		<dependency>
			<groupId>co.paralleluniverse</groupId>
			<artifactId>quasar-core</artifactId>
			<version>0.7.10</version>
		</dependency>

	</dependencies>


	<build>
		<pluginManagement>
			<plugins>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<executions>
						<execution>
							<id>getClasspathFilenames</id>
							<goals>
								<goal>properties</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<generateBackupPoms>false</generateBackupPoms>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>8</source>
					<release>8</release>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- JUnit 5 requires Surefire version 2.22.0 or higher -->
				<version>2.22.2</version>
				<configuration>
					<includes>
						<include>**/T5*.java</include>
					</includes>
				</configuration>
			</plugin>

			<!-- <plugin> <groupId>com.github.wvengen</groupId> <artifactId>proguard-maven-plugin</artifactId> 
				<version>2.0.11</version> <executions> <execution> <phase>package</phase> 
				<goals> <goal>proguard</goal> </goals> </execution> </executions> <configuration> 
				<obfuscate>true</obfuscate> <proguardInclude>${basedir}/proguard.conf</proguardInclude> 
				添加依赖，这里你可以按你的需要修改 <libs> <lib>${java.home}/lib/rt.jar</lib> <lib>${java.home}/lib/jce.jar</lib> 
				</libs> <addMavenDescriptor>false</addMavenDescriptor> </configuration> <dependencies> 
				使用4.8版本来混淆 <dependency> <groupId>net.sf.proguard</groupId> <artifactId>proguard-base</artifactId> 
				<version>6.0.3</version> <scope>runtime</scope> </dependency> </dependencies> 
				</plugin> -->


			<plugin>
				<groupId>org.eclipse.m2e</groupId>
				<artifactId>lifecycle-mapping</artifactId>
				<version>1.0.0</version>
				<configuration>
					<lifecycleMappingMetadata>
						<pluginExecutions>
							<pluginExecution>
								<pluginExecutionFilter>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-dependency-plugin</artifactId>
									<versionRange>[3.0,)</versionRange>
									<goals>
										<goal>properties</goal>
									</goals>
								</pluginExecutionFilter>
								<action>
									<ignore></ignore>
								</action>
							</pluginExecution>
							<pluginExecution>
								<pluginExecutionFilter>
									<groupId>org.fortasoft</groupId>
									<artifactId>gradle-maven-plugin</artifactId>
									<versionRange>[1.0,)</versionRange>
									<goals>
										<goal>invoke</goal>
									</goals>
								</pluginExecutionFilter>
								<action>
									<ignore></ignore>
								</action>
							</pluginExecution>
						</pluginExecutions>
					</lifecycleMappingMetadata>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.fortasoft</groupId>
				<artifactId>gradle-maven-plugin</artifactId>
				<version>1.0.8</version>
				<configuration>
					<tasks>
						<!-- this would effectively call "gradle doSomething" -->
						<task>scanSuspendables</task>
						<task>compileJava</task>
					</tasks>
				</configuration>
				<executions>
					<execution>
						<!-- You can bind this to any phase you like -->
						<phase>quasar-instrumentation</phase>
						<goals>
							<!-- goal must be "invoke" -->
							<goal>invoke</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
